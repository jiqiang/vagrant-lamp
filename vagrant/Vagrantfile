# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty32"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.101"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../project_docroot", "/srv/project_docroot", type: "rsync",
    rsync__exclude: ".git/",
    group: "www-data",
    owner: "www-data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    vb.name = "vagrant-lamp"
    vb.cpus = 2
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    if [ ! -f ~/vagrantlog ]; then
      echo "==========Create vagrant log file=========="
      touch ~/vagrantlog
    fi

    if ! grep -Fxq "prepare" ~/vagrantlog ; then
      echo "==========Prepare=========="
      sudo apt-get update
      sudo apt-get install -y python-software-properties build-essential
      sudo add-apt-repository -y ppa:ondrej/php5-5.6
      sudo apt-get update
      echo "prepare" | tee -a ~/vagrantlog
    fi

    if ! grep -Fxq "apache" ~/vagrantlog ; then
      echo "==========Install and Configure Apache"
      sudo apt-get install -y apache2
      sudo sed -i 's#;date.timezone =#date.timezone = Australia/Melbourne#g' /etc/php5/apache2/php.ini
      echo "ServerName vagrant-lamp" | sudo tee -a /etc/apache2/apache2.conf
      sudo a2enmod rewrite ssl
      sudo chown vagrant:vagrant /srv/project_docroot
      sudo cp /vagrant/vagrant-vhs.conf /etc/apache2/sites-available/vagrant-vhs.conf
      sudo a2ensite vagrant-vhs.conf
      sudo service apache2 restart
      echo "apache" | tee -a ~/vagrantlog
    fi

    if ! grep -Fxq "mysql" ~/vagrantlog ; then
      echo "==========Install and Configure mysql=========="
      sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password p@$$w03d'
      sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password p@$$w03d'
      sudo apt-get -y install mysql-server
      mysql -u root -pp@$$w03d -e "grant all privileges on *.* to 'root'@'%' identified by 'p@$$w03d' with grant option;flush privileges;"
      sudo sed -i 's/bind-address/#bind-address/g' /etc/mysql/my.cnf
      sudo sed -i 's/key_buffer/key_buffer_size/g' /etc/mysql/my.cnf
      sudo service mysql restart
      echo "mysql" | tee -a ~/vagrantlog
    fi

    if ! grep -Fxq "install packages" ~/vagrantlog ; then
      echo "==========Install packages=========="
      sudo apt-get install -y python-software-properties apache2 mysql-server php5 libapache2-mod-php5 curl php5-curl php5-gd php5-mcrypt php5-mysql php5-xmlrpc php5-common php5-dev php5-cli php5-intl git samba postgresql postgresql-contrib nodejs npm unzip
      echo "install packages" | tee -a ~/vagrantlog
    fi

    # Configurate xdebug.
    if ! grep -Fxq "xdebug" ~/vagrantlog ; then
      echo "==========Install and Configure xdebug=========="
      sudo apt-get install -y php5-xdebug
      echo '[xdebug]' >> /etc/php5/apache2/php.ini
      echo 'zend_extension="'$(find / -name 'xdebug.so' 2> /dev/null)'"' >> /etc/php5/apache2/php.ini
      echo 'xdebug.default_enable = 1' >> /etc/php5/apache2/php.ini
      echo 'xdebug.idekey = "sublime.xdebug"' >> /etc/php5/apache2/php.ini
      echo 'xdebug.remote_enable = 1' >> /etc/php5/apache2/php.ini
      echo 'xdebug.remote_autostart = 0' >> /etc/php5/apache2/php.ini
      echo 'xdebug.remote_port = 9000' >> /etc/php5/apache2/php.ini
      echo 'xdebug.remote_handler=dbgp' >> /etc/php5/apache2/php.ini
      echo 'xdebug.remote_log="/var/log/xdebug/xdebug.log"' >> /etc/php5/apache2/php.ini
      echo 'xdebug.remote_host="'$(route -n | grep 'UG' | grep -v 'UGH' | cut -f 10 -d ' ')'"' >> /etc/php5/apache2/php.ini
      echo 'xdebug.max_nesting_level = 256' >> /etc/php5/apache2/php.ini
      sudo service apache2 restart
      echo "xdebug" | tee -a ~/vagrantlog
    fi

    if ! id -nG "vagrant" | grep -qw "www-data"; then
      echo "==========Configure user group=========="
      sudo usermod -a -G www-data vagrant
    fi

    if [ ! -f /usr/local/bin/fixperms ]; then
      echo "==========Configure fixperms=========="
      sudo cp /vagrant/fixperms.sh /usr/local/bin/fixperms
      sudo chown vagrant:vagrant /usr/local/bin/fixperms
      sudo chmod 744 /usr/local/bin/fixperms
    fi

  SHELL
end


